import tkinter as tk
from tkinter import messagebox
from pynput.mouse import Controller, Button
from pynput.keyboard import Controller as KeyboardController, Key # Importamos 'Key' para usar Enter
import threading
import time
import sys

# --- Constantes y Configuraci√≥n ---
WINDOW_TITLE = "üê¶ WOODY Autoclicker"
WHITE_BG_COLOR = "#ffffff"  # Fondo Blanco
BUTTON_BG_COLOR = "#dc3545"  # Rojo (Fondo de todos los botones)
ACCENT_COLOR = "#007bff"    # Azul (Para mensajes de estado)
FONT_STYLE = ("Arial", 10, "bold")
DELAY_BEFORE_START = 3
CLICK_INTERVAL_SECONDS = 0.03 
MESSAGE_TO_TYPE = "Hola soy un bot ü§ñ de Neuros üòé que sirve a su dios ‚ö°"

class WoodyAutoclicker:
    def __init__(self, master):
        self.master = master
        master.title(WINDOW_TITLE)
        master.geometry("400x530") # Aumentamos el tama√±o para el nuevo bot√≥n
        master.resizable(False, False)
        master.config(bg=WHITE_BG_COLOR) # Establecer fondo blanco

        # Inicializaci√≥n de variables
        self.mouse = Controller()
        self.keyboard = KeyboardController() # Inicializamos el controlador de teclado
        self.target_x = None
        self.target_y = None
        self.is_running = False
        self.stop_requested = False 
        self.clicks_performed = 0
        self.current_click_limit = 0 # Para saber qu√© tarea est√° corriendo
        
        # Estilo com√∫n de botones (letras blancas, fondo rojo consistente)
        BUTTON_STYLES = {
            "fg": "white",                  # Color de fuente normal (Blanco)
            "bg": BUTTON_BG_COLOR,          # Fondo Rojo
            "disabledforeground": "white",  # Color de fuente cuando est√° deshabilitado
            "activeforeground": "white",    # Color de fuente cuando se pulsa
            "activebackground": "#b02a37",  # Tono de rojo m√°s oscuro al pulsar
            "relief": tk.FLAT,
            "font": FONT_STYLE,
            "highlightthickness": 0,        
        }

        # Estilo de etiquetas (letras negras, fondo blanco)
        LABEL_STYLES = {
            "fg": "black", # Color de fuente Negro
            "bg": WHITE_BG_COLOR,
        }

        # --- T√≠tulo Principal ---
        self.title_label = tk.Label(
            master,
            text="üê¶ WOODY",
            font=("Arial", 24, "bold"),
            **LABEL_STYLES
        )
        self.title_label.pack(pady=(20, 0))

        self.subtitle_label = tk.Label(
            master,
            text="Autoclicker",
            font=("Arial", 14),
            **LABEL_STYLES
        )
        self.subtitle_label.pack(pady=(0, 15))


        # 1. Indicador de estado/coordenadas
        self.status_label = tk.Label(
            master,
            text="Estado: Esperando coordenadas...",
            font=("Arial", 11),
            **LABEL_STYLES
        )
        self.status_label.pack(pady=5)
        
        # 1b. Etiqueta de progreso 
        self.progress_label = tk.Label(
            master,
            text=f"Intervalo: {CLICK_INTERVAL_SECONDS}s por click",
            font=("Arial", 10),
            **LABEL_STYLES
        )
        self.progress_label.pack(pady=5)


        # 2. Bot√≥n de Selecci√≥n de √Årea
        self.select_button = tk.Button(
            master,
            text="üìå Seleccionar √Årea (3s)",
            command=self.start_selection_thread,
            **BUTTON_STYLES
        )
        self.select_button.pack(pady=8, padx=20, fill=tk.X)
        
        # 3a. Bot√≥n de Iniciar 1000 Clicks
        self.start_1000_button = tk.Button(
            master,
            text="üöÄ Iniciar 1000 Clicks",
            command=lambda: self.start_clicks_thread(1000),
            state=tk.DISABLED,
            **BUTTON_STYLES
        )
        self.start_1000_button.pack(pady=(10, 5), padx=20, fill=tk.X)

        # 3b. Bot√≥n de Iniciar 5000 Clicks
        self.start_5000_button = tk.Button(
            master,
            text="‚ö°Ô∏è Iniciar 5000 Clicks",
            command=lambda: self.start_clicks_thread(5000),
            state=tk.DISABLED,
            **BUTTON_STYLES
        )
        self.start_5000_button.pack(pady=(5, 10), padx=20, fill=tk.X)
        
        # 3c. Bot√≥n de Escribir Mensaje
        self.typing_button = tk.Button(
            master,
            text="‚úçÔ∏è Escribir Mensaje",
            command=self.start_typing_thread,
            state=tk.DISABLED,
            **BUTTON_STYLES
        )
        self.typing_button.pack(pady=(5, 10), padx=20, fill=tk.X)


        # 4. Bot√≥n de Detener
        self.stop_button = tk.Button(
            master,
            text="üõë Detener Clicks",
            command=self.stop_clicks,
            state=tk.DISABLED,
            **BUTTON_STYLES
        )
        self.stop_button.pack(pady=8, padx=20, fill=tk.X)
        
        # 5. Bot√≥n de Salir
        self.exit_button = tk.Button(
            master,
            text="Salir",
            command=master.quit,
            **BUTTON_STYLES
        )
        self.exit_button.pack(pady=8, padx=20, fill=tk.X)


    # --- L√≥gica de Hilos y Captura de Coordenadas ---

    def start_selection_thread(self):
        """Inicia un hilo para la cuenta regresiva y la captura de coordenadas."""
        if self.is_running:
            return

        self.status_label.config(text="Estado: ‚è≥ 3 segundos para posicionar el rat√≥n...", fg=ACCENT_COLOR)
        self._disable_all_buttons()
        self.is_running = True

        threading.Thread(target=self.capture_coordinates_after_delay, daemon=True).start()

    def capture_coordinates_after_delay(self):
        """Espera 3 segundos y luego captura las coordenadas del rat√≥n."""
        
        # Muestra una cuenta regresiva simple en la etiqueta
        for i in range(DELAY_BEFORE_START, 0, -1):
            # Usamos master.after para actualizar la UI desde el hilo
            self.master.after(1000 * (DELAY_BEFORE_START - i), 
                              lambda i=i: self.status_label.config(text=f"Estado: ‚è≥ Captura en {i} segundos...", fg=ACCENT_COLOR))
            time.sleep(1) 

        time.sleep(1) 
        
        try:
            x, y = self.mouse.position
            self.target_x = x
            self.target_y = y
            self.master.after(0, self.update_status_after_selection)
        except Exception as e:
            self.master.after(0, lambda: self._handle_mac_permissions_error(e))

    def update_status_after_selection(self):
        """Actualiza la interfaz despu√©s de que la selecci√≥n haya terminado."""
        self.is_running = False
        self._enable_all_buttons()
        
        if self.target_x is not None:
            self.status_label.config(
                text=f"‚úÖ Coordenadas capturadas: ({self.target_x}, {self.target_y})",
                fg=BUTTON_BG_COLOR # Usamos rojo para el √©xito
            )
            # Habilita todos los botones de acci√≥n (clics y escritura)
            self.start_1000_button.config(state=tk.NORMAL)
            self.start_5000_button.config(state=tk.NORMAL)
            self.typing_button.config(state=tk.NORMAL)
            self.progress_label.config(text=f"Listo para iniciar clics o escribir.")
        else:
            self.status_label.config(text="‚ùå Error al capturar coordenadas.", fg=BUTTON_BG_COLOR)
            self.progress_label.config(text=f"Intervalo: {CLICK_INTERVAL_SECONDS}s por click")
        
    # --- L√≥gica de Auto Clicks ---

    def start_clicks_thread(self, click_limit):
        """Inicia un hilo para la r√°faga de clicks y activa el bot√≥n de Detener."""
        if self.is_running or self.target_x is None:
            return
        
        # Establece el l√≠mite de clics para esta ejecuci√≥n
        self.current_click_limit = click_limit
        
        # Reiniciar variables de control
        self.stop_requested = False
        self.clicks_performed = 0

        self.status_label.config(text=f"Estado: ‚öôÔ∏è Realizando {click_limit} clicks...", fg=ACCENT_COLOR)
        self._disable_all_buttons(allow_stop=True) # Permite que solo Detener est√© activo
        self.is_running = True
        
        threading.Thread(target=self.perform_clicks, daemon=True).start()

    def stop_clicks(self):
        """Establece el flag para detener el proceso de clicks."""
        if self.is_running:
            self.stop_requested = True
            self.status_label.config(text="Estado: üî¥ Detenci√≥n solicitada...", fg=BUTTON_BG_COLOR)
            self.stop_button.config(state=tk.DISABLED)

    def perform_clicks(self):
        """Mueve el rat√≥n y realiza los clicks con pausa, revisando el flag de detenci√≥n."""
        
        try:
            # Mueve el rat√≥n una sola vez antes de empezar
            self.mouse.position = (self.target_x, self.target_y)

            for i in range(1, self.current_click_limit + 1):
                if self.stop_requested:
                    break # Sale del bucle si se solicita la detenci√≥n

                self.clicks_performed = i
                
                # Actualiza la etiqueta de progreso en el hilo principal
                self.master.after(0, 
                                  lambda i=i: self.progress_label.config(text=f"Click {i} de {self.current_click_limit} | Faltan {self.current_click_limit - i}"))
                
                self.mouse.click(Button.left)
                
                # PAUSA DE 0.03 SEGUNDOS
                time.sleep(CLICK_INTERVAL_SECONDS) 

            self.master.after(0, self.finish_clicks)
        except Exception as e:
            self.master.after(0, lambda: self._handle_mac_permissions_error(e))

    # --- L√≥gica de Auto Escritura ---

    def start_typing_thread(self):
        """Inicia un hilo para la automatizaci√≥n de escritura."""
        if self.is_running or self.target_x is None:
            return
        
        self.status_label.config(text="Estado: ‚úçÔ∏è Escribiendo mensaje...", fg=ACCENT_COLOR)
        self.progress_label.config(text=f"Mensaje: '{MESSAGE_TO_TYPE[:30]}...'")
        self._disable_all_buttons() 
        self.is_running = True
        
        threading.Thread(target=self.perform_typing, daemon=True).start()

    def perform_typing(self):
        """Mueve el rat√≥n, hace clic y escribe el mensaje, luego presiona Enter."""
        try:
            # 1. Mueve el rat√≥n y hace clic para activar el campo de texto
            self.mouse.position = (self.target_x, self.target_y)
            time.sleep(0.1) # Breve pausa para que el cursor se mueva
            self.mouse.click(Button.left)
            time.sleep(0.1) # Breve pausa para asegurar que el campo est√° activo

            # 2. Escribe el mensaje
            self.keyboard.type(MESSAGE_TO_TYPE)
            time.sleep(0.1) 
            
            # 3. PULSA LA TECLA ENTER
            self.keyboard.press(Key.enter)
            self.keyboard.release(Key.enter)
            time.sleep(0.5) # Pausa final para que la acci√≥n se complete

            self.master.after(0, self.finish_typing)
        except Exception as e:
            self.master.after(0, lambda: self._handle_mac_permissions_error(e))

    def finish_typing(self):
        """Muestra el popup de finalizaci√≥n de escritura y restaura el estado."""
        self.is_running = False
        self._enable_all_buttons()
        
        msg = f"El mensaje ha sido escrito y enviado (pulsando Enter) en las coordenadas ({self.target_x}, {self.target_y}):\n\n{MESSAGE_TO_TYPE}"
        self.status_label.config(text="‚úÖ Tarea de escritura finalizada.", fg=BUTTON_BG_COLOR)
        self.progress_label.config(text=f"Listo para iniciar clics o escribir.")

        messagebox.showinfo("Woody - Escritura Finalizada", msg)


    # --- Finalizaci√≥n y Utilidad ---

    def finish_clicks(self):
        """Muestra el popup de finalizaci√≥n de clics y restaura el estado."""
        
        self.is_running = False
        self._enable_all_buttons()
        
        if self.clicks_performed == self.current_click_limit:
            # Tarea completada
            msg = f"La r√°faga de {self.current_click_limit} clicks izquierdos ha finalizado COMPLETAMENTE en las coordenadas ({self.target_x}, {self.target_y})."
            self.status_label.config(text=f"‚úÖ Tarea finalizada ({self.clicks_performed} clicks).", fg=BUTTON_BG_COLOR)
        else:
            # Tarea detenida
            msg = f"La r√°faga de clicks ({self.current_click_limit}) fue DETENIDA por el usuario despu√©s de realizar {self.clicks_performed} clics."
            self.status_label.config(text=f"‚ö†Ô∏è Tarea detenida ({self.clicks_performed} clicks).", fg=ACCENT_COLOR)
        
        self.progress_label.config(text=f"Total: {self.clicks_performed} clicks realizados. √öltimo l√≠mite: {self.current_click_limit}")

        # Muestra el mensaje de finalizaci√≥n con el conteo actualizado
        messagebox.showinfo("Woody - Finalizado", msg)
        
    # --- M√©todos de utilidad ---

    def _disable_all_buttons(self, allow_stop=False):
        self.select_button.config(state=tk.DISABLED)
        self.start_1000_button.config(state=tk.DISABLED)
        self.start_5000_button.config(state=tk.DISABLED)
        self.typing_button.config(state=tk.DISABLED)
        self.exit_button.config(state=tk.DISABLED)
        # Habilita el bot√≥n de detener solo si el proceso est√° en curso
        self.stop_button.config(state=tk.NORMAL if allow_stop else tk.DISABLED)

    def _enable_all_buttons(self):
        self.select_button.config(state=tk.NORMAL)
        self.exit_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED) # Siempre deshabilitado fuera del proceso de clics
        # Los botones de acci√≥n solo se habilitan si hay coordenadas capturadas
        if self.target_x is not None:
            self.start_1000_button.config(state=tk.NORMAL)
            self.start_5000_button.config(state=tk.NORMAL)
            self.typing_button.config(state=tk.NORMAL)

    def _handle_mac_permissions_error(self, error):
        """Maneja errores espec√≠ficos de pynput en macOS."""
        self.is_running = False
        self._enable_all_buttons()
        self.status_label.config(text="‚ùå ERROR de Permisos de macOS.", fg=BUTTON_BG_COLOR)
        self.progress_label.config(text=f"Intervalo: {CLICK_INTERVAL_SECONDS}s por click")

        if "You must grant permission for the application to control your input devices" in str(error) or sys.platform == "darwin":
            messagebox.showerror(
                "‚ùå ERROR: Permisos de macOS",
                "¬°ATENCI√ìN! El sistema operativo macOS est√° bloqueando el control del rat√≥n/teclado.\n\n"
                "NECESITAS hacer lo siguiente:\n"
                "1. Ir a Preferencias del Sistema > Seguridad y Privacidad > Privacidad.\n"
                "2. Seleccionar 'Accesibilidad'.\n"
                "3. Agregar la aplicaci√≥n de Python (o la terminal que ejecuta el script) a la lista de aplicaciones permitidas.\n"
                "4. Reiniciar la aplicaci√≥n de Woody."
            )
        else:
            messagebox.showerror("Error", f"Ocurri√≥ un error inesperado al usar el rat√≥n/teclado: {e}")


# --- Ejecuci√≥n Principal ---
if __name__ == "__main__":
    try:
        root = tk.Tk()
        app = WoodyAutoclicker(root)
        root.mainloop()
    except ImportError:
        messagebox.showerror(
            "Error de Dependencia",
            "La librer√≠a 'pynput' es necesaria para esta aplicaci√≥n.\n"
            "Inst√°lala con: pip install pynput"
        )
    except Exception as e:
        messagebox.showerror("Error", f"Ocurri√≥ un error inesperado al iniciar la aplicaci√≥n: {e}")
